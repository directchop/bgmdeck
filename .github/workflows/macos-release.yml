name: macOS Release

on:
  push:
    tags:
      - 'v*'

# Required to create GitHub Releases with GITHUB_TOKEN
permissions:
  contents: write

env:
  APP_NAME: BGM Deck
  APP_PATH: bgm_deck/target/release/bundle/osx/BGM Deck.app
  BIN_PATH: bgm_deck/target/release/bundle/osx/BGM Deck.app/Contents/MacOS/bgm_deck
  APP_ZIP: bgm_deck/target/release/BGM Deck.zip
  APP_DMG: bgm_deck/target/release/BGM Deck.dmg

jobs:
  build-sign-notarize:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            bgm_deck -> target

      - name: Install bundler
        run: cargo install cargo-bundle --locked

      - name: Build and bundle (.app)
        working-directory: bgm_deck
        run: |
          cargo bundle --release

      - name: Set CFBundleVersion from run number
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${GITHUB_RUN_NUMBER}" "${{ env.APP_PATH }}/Contents/Info.plist" || true

      - name: Set signing/notarization flags
        id: flags
        run: |
          CODESIGN=false
          NOTARIZE=false
          if [ -n "${{ secrets.CODE_SIGN_IDENTITY }}" ] && [ -n "${{ secrets.DEVELOPER_ID_APP_CERT_P12 }}" ] && [ -n "${{ secrets.DEVELOPER_ID_APP_CERT_PASSWORD }}" ]; then
            CODESIGN=true
          fi
          if [ -n "${{ secrets.AC_API_KEY_ID }}" ] && [ -n "${{ secrets.AC_API_ISSUER_ID }}" ] && [ -n "${{ secrets.AC_API_PRIVATE_KEY }}" ]; then
            NOTARIZE=true
          fi
          echo "codesign=$CODESIGN" >> "$GITHUB_OUTPUT"
          echo "notarize=$NOTARIZE" >> "$GITHUB_OUTPUT"

      - name: Import codesign certs
        if: ${{ steps.flags.outputs.codesign == 'true' }}
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_ID_APP_CERT_P12 }}
          p12-password: ${{ secrets.DEVELOPER_ID_APP_CERT_PASSWORD }}

      - name: Codesign binary and app bundle
        if: ${{ steps.flags.outputs.codesign == 'true' }}
        env:
          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        run: |
          security find-identity -p codesigning -v
          codesign --force --timestamp --options runtime -s "$CODE_SIGN_IDENTITY" "${{ env.BIN_PATH }}"
          codesign --force --timestamp --options runtime -s "$CODE_SIGN_IDENTITY" "${{ env.APP_PATH }}"
          codesign --verify --deep --strict --verbose=2 "${{ env.APP_PATH }}"

      - name: Zip app for notarization
        run: |
          ditto -c -k --keepParent "${{ env.APP_PATH }}" "${{ env.APP_ZIP }}"

      - name: Install create-dmg
        run: |
          brew update || true
          brew install create-dmg || true

      - name: Create DMG
        run: |
          rm -f "${{ env.APP_DMG }}"
          create-dmg \
            --volname "${{ env.APP_NAME }}" \
            --window-size 480 320 \
            --icon "${{ env.APP_NAME }}.app" 160 140 \
            --app-drop-link 320 140 \
            "${{ env.APP_DMG }}" \
            "$(dirname "${{ env.APP_PATH }}")"

      - name: Notarize with App Store Connect API key (ZIP)
        if: ${{ steps.flags.outputs.notarize == 'true' }}
        env:
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_PRIVATE_KEY: ${{ secrets.AC_API_PRIVATE_KEY }}
        run: |
          echo "$AC_API_PRIVATE_KEY" > asc_key.p8
          xcrun notarytool submit "${{ env.APP_ZIP }}" --key asc_key.p8 --key-id "$AC_API_KEY_ID" --issuer "$AC_API_ISSUER_ID" --wait

      - name: Notarize DMG (preferred)
        if: ${{ steps.flags.outputs.notarize == 'true' }}
        env:
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_PRIVATE_KEY: ${{ secrets.AC_API_PRIVATE_KEY }}
        run: |
          echo "$AC_API_PRIVATE_KEY" > asc_key.p8
          xcrun notarytool submit "${{ env.APP_DMG }}" --key asc_key.p8 --key-id "$AC_API_KEY_ID" --issuer "$AC_API_ISSUER_ID" --wait

      - name: Staple app and dmg
        if: ${{ steps.flags.outputs.notarize == 'true' }}
        run: |
          xcrun stapler staple "${{ env.APP_PATH }}"
          xcrun stapler staple "${{ env.APP_DMG }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: BGM-Deck-macOS
          path: |
            ${{ env.APP_ZIP }}
            ${{ env.APP_PATH }}
            ${{ env.APP_DMG }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.APP_ZIP }}
            ${{ env.APP_DMG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
